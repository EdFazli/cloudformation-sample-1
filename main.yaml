AWSTemplateFormatVersion: '2010-09-09'

Description: 'Simple cloudformation script'

Parameters:
  VpcCidrBlock:
    Description: 'State your VPC DR CIDR block'
    Type: String
    Default: '10.0.0.0/16'
  PublicSubnetACidrBlock:
    Description: 'State your Public Subnet A CIDR block'
    Type: String
    Default: '10.0.0.0/25'
  PrivateSubnetACidrBlock:
    Description: 'State your Private Subnet A CIDR block'
    Type: String
    Default: '10.0.10.0/25'
  Server1SnapshotID:
    Description: 'State your latest snapshot ID in SG Region'
    Type: String
    Default: ' '

Resources:
  # VPC DR Creation
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Sub '${VpcCidrBlock}'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-IGW'
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: !Ref NGWEIP
    Properties:
      AllocationId: !GetAtt 'NGWEIP.AllocationId'
      SubnetId: !Ref PublicSubnetA
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-NGW'
  IGWAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'ap-southeast-2a'
      CidrBlock: !Sub '${PublicSubnetACidrBlock}'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-Public-Subnet-A'
  PrivateSubnetA:
    DependsOn: VPCCidrBlock
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: 'ap-southeast-2a'
      CidrBlock: !Sub '${PrivateSubnetACidrBlock}'
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-Private-Subnet-A'
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-Public-RT'
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-Private-RT'
  PublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PublicRouteTableInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PrivateRouteTableNGWRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref NatGateway
  
  # EIP Creation
  NGWEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC-DR-NGW-EIP'
  
  # VPC Flow Logs Creation
  VPCFlowLogsToS3:
    Type: AWS::EC2::FlowLog
    DependsOn: !Ref VPCFlowLogsBucket
    Properties: 
      ResourceId: !Ref VPC
      ResourceType: Vpc
      TrafficType: ALL
      LogDestination: !GetAtt VPCFlowLogsBucket.Arn
      LogDestinationType: s3
      LogFormat: ${version} ${vpc-id} ${subnet-id} ${instance-id} ${srcaddr} ${dstaddr} ${srcport} ${dstport} ${protocol} ${tcp-flags} ${type} ${pkt-srcaddr} ${pkt-dstaddr}
      MaxAggregationInterval: 60
      DestinationOptions:
        FileFormat: parquet
        HiveCompatiblePartitions: true
        PerHourPartition: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC-DR-Flowlogs'
  
  # S3 Bucket Creation
  VPCFlowLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'vpc-dr-flowlogs'
      AccessControl: LogDeliveryWrite
  
  # EBS Volume Creation

  # EC2 Keypair Creation
  Server1Keypair:
    Type: AWS::EC2::KeyPair
    Properties: 
      KeyName: !Sub '${AWS::StackName}-VPC-DR-Server1-Keypair'
      KeyType: rsa
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC-DR-Server1-Keypair'

  # EC2 Instance Creation
  Server1Instance:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: 'ap-southeast-2a'
      BlockDeviceMappings: 
        - DeviceName: '/dev/sda'
          Ebs:
            SnapshotId: !Sub '${Server1SnapshotID}'
            Encrypted: True
            VolumeType: 'gp3'
            VolumeSize: 16
      IamInstanceProfile: String
      ImageId: String
      InstanceType: 't3.micro'
      KeyName: !Ref Server1Keypair
      PropagateTagsToVolumeOnCreation: True
      SecurityGroupIds: 
        - String
      SubnetId: !Ref PrivateSubnetA
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC-DR-Server1'
